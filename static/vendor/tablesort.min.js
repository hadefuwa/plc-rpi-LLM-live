/* Minimal Tablesort (MIT) â€“ lightweight client-side table sorter */
(function(w){
  function Tablesort(table){
    if (!table || table.tagName !== 'TABLE') return;
    this.table = table;
    var headers = table.querySelectorAll('thead th');
    for (var i=0;i<headers.length;i++){
      (function(idx, th, self){
        if (th.classList.contains('no-sort')) return;
        th.addEventListener('click', function(){ self.sortBy(idx, th); });
        th.tabIndex = 0;
      })(i, headers[i], this);
    }
  }
  Tablesort.prototype._getValue = function(tr, idx){
    var cell = tr.children[idx];
    if (!cell) return '';
    var v = (cell.getAttribute('data-sort') || cell.textContent || '').trim();
    var num = parseFloat(v.replace(/,/g,''));
    return isNaN(num) ? v.toLowerCase() : num;
  };
  Tablesort.prototype.sortBy = function(idx, th){
    var tbody = this.table.tBodies[0];
    if (!tbody) return;
    var rows = Array.prototype.slice.call(tbody.querySelectorAll('tr'))
      .filter(function(r){ return !r.classList.contains('details-row'); });
    var dir = th.getAttribute('aria-sort') === 'ascending' ? 'descending' : 'ascending';
    Array.prototype.forEach.call(this.table.querySelectorAll('thead th'), function(h){ h.removeAttribute('aria-sort'); });
    th.setAttribute('aria-sort', dir);
    rows.sort(function(a,b){
      var A = this._getValue(a, idx);
      var B = this._getValue(b, idx);
      if (A === B) return 0;
      if (typeof A === 'number' && typeof B === 'number'){
        return dir === 'ascending' ? A - B : B - A;
      }
      return dir === 'ascending' ? (A > B ? 1 : -1) : (A > B ? -1 : 1);
    }.bind(this));
    rows.forEach(function(r){ tbody.appendChild(r); });
  };
  w.Tablesort = Tablesort;
})(window);

